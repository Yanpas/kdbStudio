apply plugin: 'idea'
//and standard one
apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'maven'
apply plugin: 'signing'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-iostreams', version: '2.14.0'
    compile group: 'org.netbeans.api', name: 'org-openide-awt', version: 'RELEASE113'
    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.14'
    runtime files ('lib/images.jar')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

sourceSets {
    main {
        java {
            srcDirs 'src'
        }
        resources {
            srcDirs 'src','images'
            include 'log4j2.xml'
            include 'studio*.properties'
            include 'org/netbeans/editor/Bundle*.properties'
            include '*.png'
            include 'notes.md'
            include 'build.txt'
        }
    }
    test {
        java {
            srcDirs 'test'
        }
        resources {
            srcDirs 'test'
            include 'syntax.csv'
        }
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClassName = 'studio.core.Studio'
}

task getBuildHash {
    def stdout = new ByteArrayOutputStream()
    exec{
        commandLine 'git'
        args 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
        ignoreExitValue = true
    }
    file('src/build.txt').text = stdout.size() == 0 ? "unknown" : stdout;
}

processResources.dependsOn('getBuildHash')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    failOnError = false
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

group = "com.github.dzmipt"
archivesBaseName = "kdbStudio"
version = "dz1.8"

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Studio for kdb+'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Studio for kdb+ is a rapid development environment for the ultra-fast database kdb+ from Kx Systems: http://www.kx.com.'
                url 'https://github.com/dzmipt/kdbStudio'

                scm {
                    connection 'git@github.com:dzmipt/kdbStudio.git'
                    developerConnection 'git@github.com:dzmipt/kdbStudio.git'
                    url 'https://github.com/dzmipt/kdbStudio'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'dzmipt'
                        name 'Dmitry Zakharov'
                        email 'dz.mipt@gmail.com'
                    }
                }
            }
        }
    }
}
